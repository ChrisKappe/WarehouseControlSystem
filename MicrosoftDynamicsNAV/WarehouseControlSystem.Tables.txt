OBJECT Table 14 Location
{
  OBJECT-PROPERTIES
  {
    Date=03/17/18;
    Time=[ 5:20:28 PM];
    Modified=Yes;
    Version List=NAVW110.0.00.17501,WCS;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Name;
    OnDelete=VAR
               TransferRoute@1000 : Record 5742;
               WhseEmployee@1003 : Record 7301;
               WorkCenter@1004 : Record 99000754;
               StockkeepingUnit@1001 : Record 5700;
             BEGIN
               StockkeepingUnit.SETRANGE("Location Code",Code);
               IF NOT StockkeepingUnit.ISEMPTY THEN
                 ERROR(CannotDeleteLocSKUExistErr,Code);

               WMSCheckWarehouse;

               TransferRoute.SETRANGE("Transfer-from Code",Code);
               TransferRoute.DELETEALL;
               TransferRoute.RESET;
               TransferRoute.SETRANGE("Transfer-to Code",Code);
               TransferRoute.DELETEALL;

               WhseEmployee.SETRANGE("Location Code",Code);
               WhseEmployee.DELETEALL(TRUE);

               WorkCenter.SETRANGE("Location Code",Code);
               IF WorkCenter.FINDSET(TRUE) THEN
                 REPEAT
                   WorkCenter.VALIDATE("Location Code",'');
                   WorkCenter.MODIFY(TRUE);
                 UNTIL WorkCenter.NEXT = 0;
             END;

    CaptionML=ENU=Location;
    LookupPageID=Page15;
    DrillDownPageID=Page15;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 130 ;   ;Default Bin Code    ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   CaptionML=ENU=Default Bin Code }
    { 5700;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 5701;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 5702;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 5703;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                Postcode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 5704;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 5705;   ;Phone No. 2         ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. 2 }
    { 5706;   ;Telex No.           ;Text30        ;CaptionML=ENU=Telex No. }
    { 5707;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 5713;   ;Contact             ;Text50        ;CaptionML=ENU=Contact }
    { 5714;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                Postcode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 5715;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 5718;   ;E-Mail              ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=Email }
    { 5719;   ;Home Page           ;Text90        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 5720;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 5724;   ;Use As In-Transit   ;Boolean       ;OnValidate=BEGIN
                                                                IF "Use As In-Transit" THEN BEGIN
                                                                  TESTFIELD("Require Put-away",FALSE);
                                                                  TESTFIELD("Require Pick",FALSE);
                                                                  TESTFIELD("Use Cross-Docking",FALSE);
                                                                  TESTFIELD("Require Receive",FALSE);
                                                                  TESTFIELD("Require Shipment",FALSE);
                                                                  TESTFIELD("Bin Mandatory",FALSE);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5740=R;
                                                   CaptionML=ENU=Use As In-Transit }
    { 5726;   ;Require Put-away    ;Boolean       ;OnValidate=VAR
                                                                WhseActivHeader@1000 : Record 5766;
                                                                WhseRcptHeader@1001 : Record 7316;
                                                              BEGIN
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseRcptHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Require Put-away"),xRec."Require Put-away",WhseRcptHeader.TABLECAPTION);

                                                                IF NOT "Require Put-away" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Put-away");
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseActivHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Put-away"),TRUE,WhseActivHeader.TABLECAPTION);
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                END ELSE
                                                                  CreateInboundWhseRequest;
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Require Put-away }
    { 5727;   ;Require Pick        ;Boolean       ;OnValidate=VAR
                                                                WhseActivHeader@1000 : Record 5766;
                                                                WhseShptHeader@1001 : Record 7320;
                                                              BEGIN
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseShptHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Require Pick"),xRec."Require Pick",WhseShptHeader.TABLECAPTION);

                                                                IF NOT "Require Pick" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseActivHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Pick"),TRUE,WhseActivHeader.TABLECAPTION);
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                  "Pick According to FEFO" := FALSE;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Require Pick }
    { 5728;   ;Cross-Dock Due Date Calc.;DateFormula;
                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Cross-Dock Due Date Calc. }
    { 5729;   ;Use Cross-Docking   ;Boolean       ;OnValidate=BEGIN
                                                                IF "Use Cross-Docking" THEN BEGIN
                                                                  TESTFIELD("Require Receive");
                                                                  TESTFIELD("Require Shipment");
                                                                  TESTFIELD("Require Put-away");
                                                                  TESTFIELD("Require Pick");
                                                                END ELSE
                                                                  "Cross-Dock Bin Code" := '';
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Use Cross-Docking }
    { 5730;   ;Require Receive     ;Boolean       ;OnValidate=VAR
                                                                WhseRcptHeader@1000 : Record 7316;
                                                                WhseActivHeader@1001 : Record 5766;
                                                              BEGIN
                                                                IF NOT "Require Receive" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseRcptHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Receive"),TRUE,WhseRcptHeader.TABLECAPTION);
                                                                  "Receipt Bin Code" := '';
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                END ELSE BEGIN
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Put-away");
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseActivHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Receive"),FALSE,WhseActivHeader.TABLECAPTION);

                                                                  CreateInboundWhseRequest;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 7316=R;
                                                   CaptionML=ENU=Require Receive }
    { 5731;   ;Require Shipment    ;Boolean       ;OnValidate=VAR
                                                                WhseShptHeader@1000 : Record 7320;
                                                                WhseActivHeader@1001 : Record 5766;
                                                              BEGIN
                                                                IF NOT "Require Shipment" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseShptHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseShptHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Shipment"),TRUE,WhseShptHeader.TABLECAPTION);
                                                                  "Shipment Bin Code" := '';
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                END ELSE BEGIN
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseActivHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Shipment"),FALSE,WhseActivHeader.TABLECAPTION);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 7320=R;
                                                   CaptionML=ENU=Require Shipment }
    { 5732;   ;Bin Mandatory       ;Boolean       ;OnValidate=VAR
                                                                ItemLedgEntry@1004 : Record 32;
                                                                WhseEntry@1000 : Record 7312;
                                                                WhseActivHeader@1001 : Record 5766;
                                                                WhseShptHeader@1002 : Record 7320;
                                                                WhseRcptHeader@1003 : Record 7316;
                                                                WhseIntegrationMgt@1006 : Codeunit 7317;
                                                                Window@1005 : Dialog;
                                                              BEGIN
                                                                IF "Bin Mandatory" AND NOT xRec."Bin Mandatory" THEN BEGIN
                                                                  Window.OPEN(Text010);
                                                                  ItemLedgEntry.SETRANGE(Open,TRUE);
                                                                  ItemLedgEntry.SETRANGE("Location Code",Code);
                                                                  IF NOT ItemLedgEntry.ISEMPTY THEN
                                                                    ERROR(Text009,FIELDCAPTION("Bin Mandatory"));

                                                                  "Default Bin Selection" := "Default Bin Selection"::"Fixed Bin";
                                                                END;

                                                                WhseActivHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseActivHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseActivHeader.TABLECAPTION);

                                                                WhseRcptHeader.SETCURRENTKEY("Location Code");
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseRcptHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseRcptHeader.TABLECAPTION);

                                                                WhseShptHeader.SETCURRENTKEY("Location Code");
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseShptHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseShptHeader.TABLECAPTION);

                                                                IF NOT "Bin Mandatory" AND xRec."Bin Mandatory" THEN BEGIN
                                                                  WhseEntry.SETRANGE("Location Code",Code);
                                                                  WhseEntry.CALCSUMS("Qty. (Base)");
                                                                  IF WhseEntry."Qty. (Base)" <> 0 THEN
                                                                    ERROR(Text002,FIELDCAPTION("Bin Mandatory"));
                                                                END;

                                                                IF NOT "Bin Mandatory" THEN BEGIN
                                                                  "Open Shop Floor Bin Code" := '';
                                                                  "To-Production Bin Code" := '';
                                                                  "From-Production Bin Code" := '';
                                                                  "Adjustment Bin Code" := '';
                                                                  "Receipt Bin Code" := '';
                                                                  "Shipment Bin Code" := '';
                                                                  "Cross-Dock Bin Code" := '';
                                                                  "To-Assembly Bin Code" := '';
                                                                  "From-Assembly Bin Code" := '';
                                                                  WhseIntegrationMgt.CheckLocationOnManufBins(Rec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Bin Mandatory }
    { 5733;   ;Directed Put-away and Pick;Boolean ;OnValidate=VAR
                                                                WhseActivHeader@1002 : Record 5766;
                                                                WhseShptHeader@1001 : Record 7320;
                                                                WhseRcptHeader@1000 : Record 7316;
                                                              BEGIN
                                                                WhseActivHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseActivHeader.ISEMPTY THEN
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseActivHeader.TABLECAPTION);

                                                                WhseRcptHeader.SETCURRENTKEY("Location Code");
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseRcptHeader.ISEMPTY THEN
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseRcptHeader.TABLECAPTION);

                                                                WhseShptHeader.SETCURRENTKEY("Location Code");
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseShptHeader.ISEMPTY THEN
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseShptHeader.TABLECAPTION);

                                                                IF "Directed Put-away and Pick" THEN BEGIN
                                                                  TESTFIELD("Use As In-Transit",FALSE);
                                                                  TESTFIELD("Bin Mandatory");
                                                                  VALIDATE("Require Receive",TRUE);
                                                                  VALIDATE("Require Shipment",TRUE);
                                                                  VALIDATE("Require Put-away",TRUE);
                                                                  VALIDATE("Require Pick",TRUE);
                                                                  VALIDATE("Use Cross-Docking",TRUE);
                                                                  "Default Bin Selection" := "Default Bin Selection"::" ";
                                                                END ELSE
                                                                  VALIDATE("Adjustment Bin Code",'');

                                                                IF (NOT "Directed Put-away and Pick") AND xRec."Directed Put-away and Pick" THEN BEGIN
                                                                  "Default Bin Selection" := "Default Bin Selection"::"Fixed Bin";
                                                                  "Use Put-away Worksheet" := FALSE;
                                                                  VALIDATE("Use Cross-Docking",FALSE);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Directed Put-away and Pick }
    { 5734;   ;Default Bin Selection;Option       ;OnValidate=BEGIN
                                                                IF ("Default Bin Selection" <> xRec."Default Bin Selection") AND ("Default Bin Selection" = "Default Bin Selection"::" ") THEN
                                                                  TESTFIELD("Directed Put-away and Pick");
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Default Bin Selection;
                                                   OptionCaptionML=ENU=" ,Fixed Bin,Last-Used Bin";
                                                   OptionString=[ ,Fixed Bin,Last-Used Bin] }
    { 5790;   ;Outbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=ENU=Outbound Whse. Handling Time }
    { 5791;   ;Inbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=ENU=Inbound Whse. Handling Time }
    { 7305;   ;Put-away Template Code;Code10      ;TableRelation="Put-away Template Header";
                                                   CaptionML=ENU=Put-away Template Code }
    { 7306;   ;Use Put-away Worksheet;Boolean     ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Use Put-away Worksheet }
    { 7307;   ;Pick According to FEFO;Boolean     ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Pick According to FEFO }
    { 7308;   ;Allow Breakbulk     ;Boolean       ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Allow Breakbulk }
    { 7309;   ;Bin Capacity Policy ;Option        ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Bin Capacity Policy;
                                                   OptionCaptionML=ENU=Never Check Capacity,Allow More Than Max. Capacity,Prohibit More Than Max. Cap.;
                                                   OptionString=Never Check Capacity,Allow More Than Max. Capacity,Prohibit More Than Max. Cap. }
    { 7313;   ;Open Shop Floor Bin Code;Code20    ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "Open Shop Floor Bin Code",
                                                                  FIELDCAPTION("Open Shop Floor Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=ENU=Open Shop Floor Bin Code }
    { 7314;   ;To-Production Bin Code;Code20      ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "To-Production Bin Code",
                                                                  FIELDCAPTION("To-Production Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=ENU=To-Production Bin Code }
    { 7315;   ;From-Production Bin Code;Code20    ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "From-Production Bin Code",
                                                                  FIELDCAPTION("From-Production Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=ENU=From-Production Bin Code }
    { 7317;   ;Adjustment Bin Code ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=BEGIN
                                                                IF "Adjustment Bin Code" <> xRec."Adjustment Bin Code" THEN BEGIN
                                                                  IF "Adjustment Bin Code" = '' THEN
                                                                    CheckEmptyBin(
                                                                      xRec."Adjustment Bin Code",FIELDCAPTION("Adjustment Bin Code"))
                                                                  ELSE
                                                                    CheckEmptyBin(
                                                                      "Adjustment Bin Code",FIELDCAPTION("Adjustment Bin Code"));

                                                                  CheckWhseAdjmtJnl;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Adjustment Bin Code }
    { 7319;   ;Always Create Put-away Line;Boolean;AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Always Create Put-away Line }
    { 7320;   ;Always Create Pick Line;Boolean    ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Always Create Pick Line }
    { 7321;   ;Special Equipment   ;Option        ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Special Equipment;
                                                   OptionCaptionML=ENU=" ,According to Bin,According to SKU/Item";
                                                   OptionString=[ ,According to Bin,According to SKU/Item] }
    { 7323;   ;Receipt Bin Code    ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   CaptionML=ENU=Receipt Bin Code }
    { 7325;   ;Shipment Bin Code   ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   CaptionML=ENU=Shipment Bin Code }
    { 7326;   ;Cross-Dock Bin Code ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   CaptionML=ENU=Cross-Dock Bin Code }
    { 7330;   ;To-Assembly Bin Code;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "To-Assembly Bin Code",
                                                                  FIELDCAPTION("To-Assembly Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=ENU=To-Assembly Bin Code }
    { 7331;   ;From-Assembly Bin Code;Code20      ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "From-Assembly Bin Code",
                                                                  FIELDCAPTION("From-Assembly Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=ENU=From-Assembly Bin Code }
    { 7332;   ;Asm.-to-Order Shpt. Bin Code;Code20;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "Asm.-to-Order Shpt. Bin Code",
                                                                  FIELDCAPTION("Asm.-to-Order Shpt. Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=ENU=Asm.-to-Order Shpt. Bin Code }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=ENU=Base Calendar Code }
    { 7700;   ;Use ADCS            ;Boolean       ;AccessByPermission=TableData 7700=R;
                                                   CaptionML=ENU=Use ADCS }
    { 52001;  ;Plan Width          ;Integer       ;Description=Warehouse Control System }
    { 52002;  ;Plan Height         ;Integer       ;Description=Warehouse Control System }
    { 52003;  ;Left                ;Integer       ;Description=Warehouse Control System }
    { 52004;  ;Top                 ;Integer       ;Description=Warehouse Control System }
    { 52005;  ;Width               ;Integer       ;Description=Warehouse Control System }
    { 52006;  ;Height              ;Integer       ;Description=Warehouse Control System }
    { 52007;  ;Scheme Visible      ;Boolean       ;Description=Warehouse Control System }
    { 52010;  ;HexColor            ;Text10        ;Description=Warehouse Control System }
    { 52014;  ;Bin Quantity        ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Bin WHERE (Location Code=FIELD(Code)));
                                                   Description=Warehouse Control System;
                                                   Editable=No }
    { 52015;  ;Zone Quantity       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Zone WHERE (Location Code=FIELD(Code)));
                                                   Description=Warehouse Control System;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Name                                     }
    {    ;Use As In-Transit,Bin Mandatory          }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Bin@1000 : Record 7354;
      Postcode@1001 : Record 225;
      WhseSetup@1002 : Record 5769;
      InvtSetup@1003 : Record 313;
      Location@1004 : Record 14;
      Text000@1005 : TextConst 'ENU=You cannot delete the %1 %2, because they contain items.';
      Text001@1006 : TextConst 'ENU=You cannot delete the %1 %2, because one or more Warehouse Activity Lines exist for this %1.';
      Text002@1007 : TextConst 'ENU=%1 must be Yes, because the bins contain items.';
      Text003@1009 : TextConst 'ENU=Cancelled.';
      Text004@1010 : TextConst 'ENU=The total quantity of items in the warehouse is 0, but the Adjustment Bin contains a negative quantity and other bins contain a positive quantity.\';
      Text005@1012 : TextConst 'ENU=Do you still want to delete this %1?';
      Text006@1011 : TextConst 'ENU=You cannot change the %1 until the inventory stored in %2 %3 is 0.';
      Text007@1013 : TextConst 'ENU=You have to delete all Adjustment Warehouse Journal Lines first before you can change the %1.';
      Text008@1008 : TextConst 'ENU=%1 must be %2, because one or more %3 exist.';
      Text009@1014 : TextConst 'ENU=You cannot change %1 because there are one or more open ledger entries on this location.';
      Text010@1015 : TextConst 'ENU=Checking item ledger entries for open entries...';
      Text011@1016 : TextConst 'ENU=You cannot change the %1 to %2 until the inventory stored in this bin is 0.';
      Text012@1017 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text013@1018 : TextConst 'ENU=You cannot delete %1 because there are one or more ledger entries on this location.';
      Text014@1019 : TextConst 'ENU=You cannot change %1 because one or more %2 exist.';
      CannotDeleteLocSKUExistErr@1020 : TextConst '@@@=%1: Field(Code);ENU=You cannot delete %1 because one or more stockkeeping units exist at this location.';

    PROCEDURE RequireShipment@5(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Shipment");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Shipment");
    END;

    PROCEDURE RequirePicking@1(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Pick");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Pick");
    END;

    PROCEDURE RequireReceive@4(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Receive");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Receive");
    END;

    PROCEDURE RequirePutaway@2(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Put-away");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Put-away");
    END;

    PROCEDURE GetLocationSetup@3(LocationCode@1000 : Code[10];VAR Location2@1001 : Record 14) : Boolean;
    BEGIN
      IF NOT GET(LocationCode) THEN
        WITH Location2 DO BEGIN
          INIT;
          WhseSetup.GET;
          InvtSetup.GET;
          Code := LocationCode;
          "Use As In-Transit" := FALSE;
          "Require Put-away" := WhseSetup."Require Put-away";
          "Require Pick" := WhseSetup."Require Pick";
          "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
          "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
          "Require Receive" := WhseSetup."Require Receive";
          "Require Shipment" := WhseSetup."Require Shipment";
          EXIT(FALSE);
        END;

      Location2 := Rec;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE WMSCheckWarehouse@7300();
    VAR
      Zone@1005 : Record 7300;
      Bin@1006 : Record 7354;
      BinContent@1004 : Record 7302;
      WhseActivLine@1003 : Record 5767;
      WarehouseEntry@1002 : Record 7312;
      WarehouseEntry2@1001 : Record 7312;
      WhseJnlLine@1000 : Record 7311;
      ItemLedgerEntry@1007 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Location Code",Code);
      ItemLedgerEntry.SETRANGE(Open,TRUE);
      IF NOT ItemLedgerEntry.ISEMPTY THEN
        ERROR(Text013,Code);

      WarehouseEntry.SETRANGE("Location Code",Code);
      WarehouseEntry.CALCSUMS("Qty. (Base)");
      IF WarehouseEntry."Qty. (Base)" = 0 THEN BEGIN
        IF "Adjustment Bin Code" <> '' THEN BEGIN
          WarehouseEntry2.SETRANGE("Bin Code","Adjustment Bin Code");
          WarehouseEntry2.SETRANGE("Location Code",Code);
          WarehouseEntry2.CALCSUMS("Qty. (Base)");
          IF WarehouseEntry2."Qty. (Base)" < 0 THEN
            IF NOT CONFIRM(Text004 + Text005,FALSE,TABLECAPTION) THEN
              ERROR(Text003)
        END;
      END ELSE
        ERROR(Text000,TABLECAPTION,Code);

      WhseActivLine.SETRANGE("Location Code",Code);
      WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type"::Movement);
      WhseActivLine.SETFILTER("Qty. Outstanding",'<>0');
      IF NOT WhseActivLine.ISEMPTY THEN
        ERROR(Text001,TABLECAPTION,Code);

      WhseJnlLine.SETRANGE("Location Code",Code);
      WhseJnlLine.SETFILTER(Quantity,'<>0');
      IF NOT WhseJnlLine.ISEMPTY THEN
        ERROR(Text001,TABLECAPTION,Code);

      Zone.SETRANGE("Location Code",Code);
      Zone.DELETEALL;
      Bin.SETRANGE("Location Code",Code);
      Bin.DELETEALL;
      BinContent.SETRANGE("Location Code",Code);
      BinContent.DELETEALL;
    END;

    LOCAL PROCEDURE CheckEmptyBin@7302(BinCode@1001 : Code[20];CaptionOfField@1002 : Text[30]);
    VAR
      WarehouseEntry@1003 : Record 7312;
      WhseEntry2@1000 : Record 7312;
    BEGIN
      WarehouseEntry.SETCURRENTKEY("Bin Code","Location Code","Item No.");
      WarehouseEntry.SETRANGE("Bin Code",BinCode);
      WarehouseEntry.SETRANGE("Location Code",Code);
      IF WarehouseEntry.FINDFIRST THEN
        REPEAT
          WarehouseEntry.SETRANGE("Item No.",WarehouseEntry."Item No.");

          WhseEntry2.SETCURRENTKEY("Item No.","Bin Code","Location Code");
          WhseEntry2.COPYFILTERS(WarehouseEntry);
          WhseEntry2.CALCSUMS("Qty. (Base)");
          IF WhseEntry2."Qty. (Base)" <> 0 THEN BEGIN
            IF (BinCode = "Adjustment Bin Code") AND (xRec."Adjustment Bin Code" = '') THEN
              ERROR(Text011,CaptionOfField,BinCode);

            ERROR(Text006,CaptionOfField,Bin.TABLECAPTION,BinCode);
          END;

          WarehouseEntry.FINDLAST;
          WarehouseEntry.SETRANGE("Item No.");
        UNTIL WarehouseEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckWhseAdjmtJnl@7303();
    VAR
      WhseJnlTemplate@1002 : Record 7309;
      WhseJnlLine@1003 : Record 7311;
    BEGIN
      WhseJnlTemplate.SETRANGE(Type,WhseJnlTemplate.Type::Item);
      IF WhseJnlTemplate.FIND('-') THEN
        REPEAT
          WhseJnlLine.SETRANGE("Journal Template Name",WhseJnlTemplate.Name);
          WhseJnlLine.SETRANGE("Location Code",Code);
          IF NOT WhseJnlLine.ISEMPTY THEN
            ERROR(
              Text007,
              FIELDCAPTION("Adjustment Bin Code"));
        UNTIL WhseJnlTemplate.NEXT = 0;
    END;

    PROCEDURE GetRequirementText@6(FieldNumber@1000 : Integer) : Text[50];
    VAR
      Text000@1002 : TextConst 'ENU=Shipment,Receive,Pick,Put-Away';
    BEGIN
      CASE FieldNumber OF
        FIELDNO("Require Shipment"):
          EXIT(SELECTSTR(1,Text000));
        FIELDNO("Require Receive"):
          EXIT(SELECTSTR(2,Text000));
        FIELDNO("Require Pick"):
          EXIT(SELECTSTR(3,Text000));
        FIELDNO("Require Put-away"):
          EXIT(SELECTSTR(4,Text000));
      END;
    END;

    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Location,GETPOSITION)
      ELSE
        MESSAGE(Text012);
    END;

    PROCEDURE IsBWReceive@8() : Boolean;
    BEGIN
      EXIT("Bin Mandatory" AND (NOT "Directed Put-away and Pick") AND "Require Receive");
    END;

    PROCEDURE IsBWShip@12() : Boolean;
    BEGIN
      EXIT("Bin Mandatory" AND (NOT "Directed Put-away and Pick") AND "Require Shipment");
    END;

    PROCEDURE IsBinBWReceiveOrShip@11(BinCode@1000 : Code[20]) : Boolean;
    BEGIN
      EXIT(("Receipt Bin Code" <> '') AND (BinCode = "Receipt Bin Code") OR
        ("Shipment Bin Code" <> '') AND (BinCode = "Shipment Bin Code"));
    END;

    PROCEDURE IsInTransit@10(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Use As In-Transit");
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateInboundWhseRequest@13();
    VAR
      TransferHeader@1002 : Record 5740;
      TransferLine@1004 : Record 5741;
      WarehouseRequest@1000 : Record 5765;
      WhseTransferRelease@1003 : Codeunit 5773;
    BEGIN
      TransferLine.SETRANGE("Transfer-to Code",Code);
      IF TransferLine.FINDSET THEN
        REPEAT
          IF TransferLine."Quantity Received" <> TransferLine."Quantity Shipped" THEN BEGIN
            TransferHeader.GET(TransferLine."Document No.");
            WhseTransferRelease.InitializeWhseRequest(WarehouseRequest,TransferHeader,TransferHeader.Status);
            WhseTransferRelease.CreateInboundWhseRequest(WarehouseRequest,TransferHeader);

            TransferLine.SETRANGE("Document No.",TransferLine."Document No.");
            TransferLine.FINDLAST;
            TransferLine.SETRANGE("Document No.");
          END;
        UNTIL TransferLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 5769 Warehouse Setup
{
  OBJECT-PROPERTIES
  {
    Date=03/17/18;
    Time=[ 5:18:58 PM];
    Modified=Yes;
    Version List=NAVW18.00,WCS;
  }
  PROPERTIES
  {
    CaptionML=ENU=Warehouse Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Whse. Receipt Nos.  ;Code10        ;TableRelation="No. Series";
                                                   AccessByPermission=TableData 7316=R;
                                                   CaptionML=ENU=Whse. Receipt Nos. }
    { 3   ;   ;Whse. Put-away Nos. ;Code10        ;TableRelation="No. Series";
                                                   AccessByPermission=TableData 7340=R;
                                                   CaptionML=ENU=Whse. Put-away Nos. }
    { 5   ;   ;Whse. Pick Nos.     ;Code10        ;TableRelation="No. Series";
                                                   AccessByPermission=TableData 7342=R;
                                                   CaptionML=ENU=Whse. Pick Nos. }
    { 6   ;   ;Whse. Ship Nos.     ;Code10        ;TableRelation="No. Series";
                                                   AccessByPermission=TableData 7320=R;
                                                   CaptionML=ENU=Whse. Ship Nos. }
    { 7   ;   ;Registered Whse. Pick Nos.;Code10  ;TableRelation="No. Series";
                                                   AccessByPermission=TableData 7342=R;
                                                   CaptionML=ENU=Registered Whse. Pick Nos. }
    { 10  ;   ;Registered Whse. Put-away Nos.;Code10;
                                                   TableRelation="No. Series";
                                                   AccessByPermission=TableData 7340=R;
                                                   CaptionML=ENU=Registered Whse. Put-away Nos. }
    { 13  ;   ;Require Receive     ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT "Require Receive" THEN
                                                                  "Require Put-away" := FALSE;
                                                              END;

                                                   AccessByPermission=TableData 7316=R;
                                                   CaptionML=ENU=Require Receive }
    { 14  ;   ;Require Put-away    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Require Put-away" THEN
                                                                  "Require Receive" := TRUE;
                                                              END;

                                                   AccessByPermission=TableData 7340=R;
                                                   CaptionML=ENU=Require Put-away }
    { 15  ;   ;Require Pick        ;Boolean       ;OnValidate=BEGIN
                                                                IF "Require Pick" THEN
                                                                  "Require Shipment" := TRUE;
                                                              END;

                                                   AccessByPermission=TableData 7342=R;
                                                   CaptionML=ENU=Require Pick }
    { 16  ;   ;Require Shipment    ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT "Require Shipment" THEN
                                                                  "Require Pick" := FALSE;
                                                              END;

                                                   AccessByPermission=TableData 7320=R;
                                                   CaptionML=ENU=Require Shipment }
    { 17  ;   ;Last Whse. Posting Ref. No.;Integer;CaptionML=ENU=Last Whse. Posting Ref. No.;
                                                   Editable=No }
    { 18  ;   ;Receipt Posting Policy;Option      ;CaptionML=ENU=Receipt Posting Policy;
                                                   OptionCaptionML=ENU=Posting errors are not processed,Stop and show the first posting error;
                                                   OptionString=Posting errors are not processed,Stop and show the first posting error }
    { 19  ;   ;Shipment Posting Policy;Option     ;CaptionML=ENU=Shipment Posting Policy;
                                                   OptionCaptionML=ENU=Posting errors are not processed,Stop and show the first posting error;
                                                   OptionString=Posting errors are not processed,Stop and show the first posting error }
    { 7301;   ;Posted Whse. Receipt Nos.;Code10   ;TableRelation="No. Series";
                                                   AccessByPermission=TableData 7316=R;
                                                   CaptionML=ENU=Posted Whse. Receipt Nos. }
    { 7303;   ;Posted Whse. Shipment Nos.;Code10  ;TableRelation="No. Series";
                                                   AccessByPermission=TableData 7320=R;
                                                   CaptionML=ENU=Posted Whse. Shipment Nos. }
    { 7304;   ;Whse. Internal Put-away Nos.;Code10;TableRelation="No. Series";
                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Whse. Internal Put-away Nos. }
    { 7306;   ;Whse. Internal Pick Nos.;Code10    ;TableRelation="No. Series";
                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Whse. Internal Pick Nos. }
    { 7308;   ;Whse. Movement Nos. ;Code10        ;TableRelation="No. Series";
                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Whse. Movement Nos. }
    { 7309;   ;Registered Whse. Movement Nos.;Code10;
                                                   TableRelation="No. Series";
                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Registered Whse. Movement Nos. }
    { 52001;  ;Plan Width          ;Integer        }
    { 52002;  ;Plan Height         ;Integer        }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE GetNextReference@1() : Integer;
    BEGIN
      LOCKTABLE;
      GET;
      "Last Whse. Posting Ref. No." := "Last Whse. Posting Ref. No." + 1;
      MODIFY;
      EXIT("Last Whse. Posting Ref. No.");
    END;

    BEGIN
    END.
  }
}

OBJECT Table 7300 Zone
{
  OBJECT-PROPERTIES
  {
    Date=03/17/18;
    Time=[ 5:21:16 PM];
    Modified=Yes;
    Version List=NAVW18.00,WCS;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Code,Description;
    OnDelete=VAR
               Bin@1000 : Record 7354;
             BEGIN
               Bin.SETCURRENTKEY("Location Code","Zone Code");
               Bin.SETRANGE("Location Code","Location Code");
               Bin.SETRANGE("Zone Code",Code);
               Bin.DELETEALL(TRUE);
             END;

    CaptionML=ENU=Zone;
    LookupPageID=Page7301;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code;
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 2   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 5   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 10  ;   ;Bin Type Code       ;Code10        ;TableRelation="Bin Type";
                                                   CaptionML=ENU=Bin Type Code }
    { 11  ;   ;Warehouse Class Code;Code10        ;TableRelation="Warehouse Class";
                                                   CaptionML=ENU=Warehouse Class Code }
    { 20  ;   ;Special Equipment Code;Code10      ;TableRelation="Special Equipment";
                                                   CaptionML=ENU=Special Equipment Code }
    { 21  ;   ;Zone Ranking        ;Integer       ;CaptionML=ENU=Zone Ranking }
    { 40  ;   ;Cross-Dock Bin Zone ;Boolean       ;CaptionML=ENU=Cross-Dock Bin Zone }
    { 52001;  ;Plan Width          ;Integer       ;Description=Warehouse Control System }
    { 52002;  ;Plan Height         ;Integer       ;Description=Warehouse Control System }
    { 52003;  ;Left                ;Integer       ;Description=Warehouse Control System }
    { 52004;  ;Top                 ;Integer       ;Description=Warehouse Control System }
    { 52005;  ;Width               ;Integer       ;Description=Warehouse Control System }
    { 52006;  ;Height              ;Integer       ;Description=Warehouse Control System }
    { 52007;  ;Scheme Visible      ;Boolean       ;Description=Warehouse Control System }
    { 52010;  ;HexColor            ;Text10        ;Description=Warehouse Control System }
    { 52014;  ;Bin Quantity        ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Bin WHERE (Location Code=FIELD(Location Code),
                                                                                Zone Code=FIELD(Code)));
                                                   Description=Warehouse Control System;
                                                   Editable=No }
    { 52015;  ;Rack Quantity       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Rack WHERE (Location Code=FIELD(Location Code),
                                                                                 Zone Code=FIELD(Code)));
                                                   Description=Warehouse Control System;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Location Code,Code                      ;Clustered=Yes }
    {    ;Code                                     }
    {    ;Description                              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 7354 Bin
{
  OBJECT-PROPERTIES
  {
    Date=03/17/18;
    Time=[ 5:01:58 PM];
    Modified=Yes;
    Version List=NAVW110.0.00.16996,WCS;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Zone Code,Code;
    OnInsert=BEGIN
               TESTFIELD("Location Code");
               GetLocation("Location Code");
               IF Location."Directed Put-away and Pick" THEN BEGIN
                 TESTFIELD("Zone Code");
                 TESTFIELD("Bin Type Code");
               END ELSE BEGIN
                 TESTFIELD("Zone Code",'');
                 TESTFIELD("Bin Type Code",'');
               END;
             END;

    OnModify=BEGIN
               GetLocation("Location Code");
               IF Location."Directed Put-away and Pick" THEN BEGIN
                 TESTFIELD("Zone Code");
                 TESTFIELD("Bin Type Code");
               END ELSE BEGIN
                 TESTFIELD("Zone Code",'');
                 TESTFIELD("Bin Type Code",'');
               END;
             END;

    OnDelete=VAR
               Location@1003 : Record 14;
               ItemJnlLine@1004 : Record 83;
             BEGIN
               CheckEmptyBin(Text008);

               Location.GET("Location Code");
               IF Location."Adjustment Bin Code" = Code THEN BEGIN
                 ItemJnlLine.SETCURRENTKEY("Entry Type","Item No.","Variant Code","Location Code");
                 ItemJnlLine.SETFILTER("Entry Type",'%1|%2|%3|%4',
                   ItemJnlLine."Entry Type"::"Negative Adjmt.",ItemJnlLine."Entry Type"::Sale,
                   ItemJnlLine."Entry Type"::"Positive Adjmt.",ItemJnlLine."Entry Type"::Purchase);
                 ItemJnlLine.SETRANGE("Location Code","Location Code");
                 IF ItemJnlLine.FINDFIRST THEN
                   IF NOT CONFIRM(
                        Text002,FALSE,STRSUBSTNO(ItemJnlLine.TABLECAPTION,TABLECAPTION))
                   THEN
                     ERROR(Text003);
               END;

               BinContent.RESET;
               BinContent.SETRANGE("Location Code","Location Code");
               BinContent.SETRANGE("Bin Code",Code);
               BinContent.DELETEALL;
             END;

    CaptionML=ENU=Bin;
    LookupPageID=Page7303;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code;
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 2   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 3   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 4   ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF "Zone Code" <> xRec."Zone Code" THEN BEGIN
                                                                  CheckEmptyBin(Text007);
                                                                  IF Code = '' THEN
                                                                    SetUpNewLine;
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Zone Code","Zone Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Zone Code;
                                                   Editable=No }
    { 5   ;   ;Adjustment Bin      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist(Location WHERE (Code=FIELD(Location Code),
                                                                                     Adjustment Bin Code=FIELD(Code)));
                                                   CaptionML=ENU=Adjustment Bin;
                                                   Editable=No }
    { 10  ;   ;Bin Type Code       ;Code10        ;TableRelation="Bin Type";
                                                   OnValidate=BEGIN
                                                                IF "Bin Type Code" <> xRec."Bin Type Code" THEN BEGIN
                                                                  CheckEmptyBin(Text007);
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Bin Type Code","Bin Type Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Bin Type Code }
    { 11  ;   ;Warehouse Class Code;Code10        ;TableRelation="Warehouse Class";
                                                   OnValidate=BEGIN
                                                                IF "Warehouse Class Code" <> xRec."Warehouse Class Code" THEN BEGIN
                                                                  CheckEmptyBin(Text007);
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Warehouse Class Code","Warehouse Class Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Warehouse Class Code }
    { 12  ;   ;Block Movement      ;Option        ;OnValidate=BEGIN
                                                                IF "Block Movement" <> xRec."Block Movement" THEN BEGIN
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Block Movement","Block Movement");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Block Movement;
                                                   OptionCaptionML=ENU=" ,Inbound,Outbound,All";
                                                   OptionString=[ ,Inbound,Outbound,All] }
    { 20  ;   ;Special Equipment Code;Code10      ;TableRelation="Special Equipment";
                                                   CaptionML=ENU=Special Equipment Code }
    { 21  ;   ;Bin Ranking         ;Integer       ;OnValidate=VAR
                                                                WhseActivLine@1000 : Record 5767;
                                                              BEGIN
                                                                IF "Bin Ranking" <> xRec."Bin Ranking" THEN BEGIN
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Bin Ranking","Bin Ranking");

                                                                  WhseActivLine.SETCURRENTKEY("Bin Code","Location Code");
                                                                  WhseActivLine.SETRANGE("Bin Code",Code);
                                                                  WhseActivLine.SETRANGE("Location Code","Location Code");
                                                                  WhseActivLine.MODIFYALL("Bin Ranking","Bin Ranking");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Bin Ranking }
    { 22  ;   ;Maximum Cubage      ;Decimal       ;OnValidate=BEGIN
                                                                CheckMaxQtyBinContent(FALSE);
                                                              END;

                                                   CaptionML=ENU=Maximum Cubage;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 23  ;   ;Maximum Weight      ;Decimal       ;OnValidate=BEGIN
                                                                CheckMaxQtyBinContent(TRUE);
                                                              END;

                                                   CaptionML=ENU=Maximum Weight;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 30  ;   ;Empty               ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Empty;
                                                   Editable=No }
    { 32  ;   ;Item Filter         ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Item;
                                                   CaptionML=ENU=Item Filter }
    { 33  ;   ;Variant Filter      ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Stockkeeping Unit"."Variant Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                           Item No.=FIELD(Item Filter));
                                                   CaptionML=ENU=Variant Filter }
    { 34  ;   ;Default             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Bin Content" WHERE (Location Code=FIELD(Location Code),
                                                                                          Bin Code=FIELD(Code),
                                                                                          Item No.=FIELD(Item Filter),
                                                                                          Variant Code=FIELD(Variant Filter),
                                                                                          Default=CONST(Yes)));
                                                   CaptionML=ENU=Default;
                                                   Editable=No }
    { 40  ;   ;Cross-Dock Bin      ;Boolean       ;OnValidate=BEGIN
                                                                IF "Cross-Dock Bin" <> xRec."Cross-Dock Bin" THEN BEGIN
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Cross-Dock Bin","Cross-Dock Bin");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cross-Dock Bin }
    { 41  ;   ;Dedicated           ;Boolean       ;OnValidate=BEGIN
                                                                IF Dedicated <> xRec.Dedicated THEN BEGIN
                                                                  CheckEmptyBin(Text007);
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL(Dedicated,Dedicated);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Dedicated }
    { 52001;  ;Rack No.            ;Code10        ;Description=Warehouse Control System }
    { 52002;  ;Section             ;Integer       ;Description=Warehouse Control System }
    { 52003;  ;Level               ;Integer       ;Description=Warehouse Control System }
    { 52004;  ;Depth               ;Integer       ;Description=Warehouse Control System }
    { 52005;  ;Section Span        ;Integer       ;Description=Warehouse Control System }
    { 52006;  ;Level Span          ;Integer       ;Description=Warehouse Control System }
    { 52007;  ;Depth Span          ;Integer       ;Description=Warehouse Control System }
  }
  KEYS
  {
    {    ;Location Code,Code                      ;Clustered=Yes }
    {    ;Bin Type Code                            }
    {    ;Location Code,Warehouse Class Code,Bin Ranking }
    {    ;Location Code,Zone Code,Code             }
    {    ;Code                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1009 : Record 14;
      Zone@1000 : Record 7300;
      Text000@1001 : TextConst 'ENU="You cannot %1 the %2 with %3 = %4, %5 = %6, because the %2 contains items."';
      Text001@1002 : TextConst 'ENU="You cannot %1 the %2 with %3 = %4, %5 = %6, because one or more %7 exists for this %2."';
      Text002@1003 : TextConst 'ENU=One or more %1 exists for this bin. Do you still want to delete this %2?';
      Text003@1004 : TextConst 'ENU=Cancelled.';
      BinContent@1010 : Record 7302;
      Item@1012 : Record 27;
      WMSMgt@1005 : Codeunit 7302;
      Text005@1006 : TextConst 'ENU=The total cubage %1 of the %2 in the bin contents exceeds the entered %3 %4.\Do you still want to enter this %3?';
      Text006@1007 : TextConst 'ENU=The total weight %1 of the %2 in the bin contents exceeds the entered %3 %4.\Do you still want to enter this %3?';
      Text007@1008 : TextConst 'ENU=modify';
      Text008@1011 : TextConst 'ENU=delete';

    PROCEDURE SetUpNewLine@8();
    BEGIN
      GetLocation("Location Code");
      IF Location."Directed Put-away and Pick" THEN
        IF GetZone("Location Code","Zone Code") THEN BEGIN
          "Bin Type Code" := Zone."Bin Type Code";
          "Warehouse Class Code" := Zone."Warehouse Class Code";
          "Special Equipment Code" := Zone."Special Equipment Code";
          "Bin Ranking" := Zone."Zone Ranking";
          "Cross-Dock Bin" := Zone."Cross-Dock Bin Zone";
        END;
    END;

    LOCAL PROCEDURE GetZone@1(LocationCode@1000 : Code[10];ZoneCode@1001 : Code[10]) : Boolean;
    BEGIN
      IF (LocationCode = '') OR (ZoneCode = '') THEN
        EXIT(FALSE);
      IF (Zone."Location Code" <> LocationCode) OR
         (Zone.Code <> ZoneCode)
      THEN
        IF NOT Zone.GET("Location Code","Zone Code") THEN
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE CalcCubageAndWeight@3(VAR Cubage@1000 : Decimal;VAR Weight@1007 : Decimal;CalledbyPosting@1012 : Boolean);
    VAR
      PostedCubage@1001 : Decimal;
      PostedWeight@1002 : Decimal;
      WhseActivityWeight@1006 : Decimal;
      WhseActivityCubage@1005 : Decimal;
      JournalWeight@1004 : Decimal;
      JournalCubage@1003 : Decimal;
      WhseRcptWeight@1009 : Decimal;
      WhseRcptCubage@1008 : Decimal;
      WhseShptWeight@1011 : Decimal;
      WhseShptCubage@1010 : Decimal;
      WhseIntPickWeight@1014 : Decimal;
      WhseIntPickCubage@1013 : Decimal;
    BEGIN
      IF ("Maximum Cubage" <> 0) OR ("Maximum Weight" <> 0) THEN BEGIN
        CalcPostedCubageAndWeight(PostedCubage,PostedWeight);
        IF NOT CalledbyPosting THEN BEGIN
          CalcPutAwayOnWhseActivity(WhseActivityWeight,WhseActivityCubage);
          CalcPutAwayOnWhseJnl(JournalWeight,JournalCubage);
          CalcPutAwayOnWhseRcpt(WhseRcptWeight,WhseRcptCubage);
          CalcPutAwayOnWhseShpt(WhseShptWeight,WhseShptCubage);
          CalcPutAwayOnWhseIntPick(WhseIntPickWeight,WhseIntPickCubage);
        END;
        IF "Maximum Cubage" <> 0 THEN
          Cubage :=
            "Maximum Cubage" -
            (PostedCubage + WhseActivityCubage + JournalCubage +
             WhseRcptCubage + WhseShptCubage + WhseIntPickCubage);

        IF "Maximum Weight" <> 0 THEN
          Weight :=
            "Maximum Weight" -
            (PostedWeight + WhseActivityWeight + JournalWeight +
             WhseRcptWeight + WhseShptWeight + WhseIntPickWeight);
      END;
    END;

    LOCAL PROCEDURE CalcPostedCubageAndWeight@5(VAR PostedCubage@1000 : Decimal;VAR PostedWeight@1002 : Decimal);
    VAR
      WhseEntry@1001 : Record 7312;
    BEGIN
      WhseEntry.SETCURRENTKEY("Bin Code","Location Code");
      WhseEntry.SETRANGE("Bin Code",Code);
      WhseEntry.SETRANGE("Location Code","Location Code");
      WhseEntry.CALCSUMS(Cubage,Weight);
      PostedCubage := WhseEntry.Cubage;
      PostedWeight := WhseEntry.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseActivity@21(VAR WhseActivWeight@1002 : Decimal;VAR WhseActivCubage@1000 : Decimal);
    VAR
      WhseActivLine@1001 : Record 5767;
    BEGIN
      WhseActivLine.SETCURRENTKEY("Bin Code","Location Code","Action Type");
      WhseActivLine.SETRANGE("Bin Code",Code);
      WhseActivLine.SETRANGE("Location Code","Location Code");
      WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Place);
      WhseActivLine.CALCSUMS(Cubage,Weight);
      WhseActivCubage := WhseActivLine.Cubage;
      WhseActivWeight := WhseActivLine.Weight;

      WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Take);
      WhseActivLine.SETFILTER("Breakbulk No.",'<>0');
      WhseActivLine.CALCSUMS(Cubage,Weight);
      WhseActivCubage := WhseActivCubage - WhseActivLine.Cubage;
      WhseActivWeight := WhseActivWeight - WhseActivLine.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseJnl@22(VAR JournalWeight@1002 : Decimal;VAR JournalCubage@1001 : Decimal);
    VAR
      WhseJnlLine@1000 : Record 7311;
    BEGIN
      WhseJnlLine.SETCURRENTKEY("To Bin Code","Location Code");
      WhseJnlLine.SETRANGE("To Bin Code",Code);
      WhseJnlLine.SETRANGE("Location Code","Location Code");
      WhseJnlLine.CALCSUMS(Cubage,Weight);
      JournalCubage := WhseJnlLine.Cubage;
      JournalWeight := WhseJnlLine.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseRcpt@11(VAR WhseRcptWeight@1002 : Decimal;VAR WhseRcptCubage@1000 : Decimal);
    VAR
      WhseRcptLine@1001 : Record 7317;
    BEGIN
      WhseRcptLine.SETCURRENTKEY("Bin Code","Location Code");
      WhseRcptLine.SETRANGE("Bin Code",Code);
      WhseRcptLine.SETRANGE("Location Code","Location Code");
      WhseRcptLine.CALCSUMS(Cubage,Weight);
      WhseRcptCubage := WhseRcptLine.Cubage;
      WhseRcptWeight := WhseRcptLine.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseShpt@13(VAR WhseShptWeight@1002 : Decimal;VAR WhseShptCubage@1000 : Decimal);
    VAR
      WhseShptLine@1001 : Record 7321;
    BEGIN
      WhseShptLine.SETCURRENTKEY("Bin Code","Location Code");
      WhseShptLine.SETRANGE("Bin Code",Code);
      WhseShptLine.SETRANGE("Location Code","Location Code");
      WhseShptLine.CALCSUMS(Cubage,Weight);
      WhseShptCubage := WhseShptLine.Cubage;
      WhseShptWeight := WhseShptLine.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseIntPick@12(VAR WhseIntPickWeight@1002 : Decimal;VAR WhseIntPickCubage@1000 : Decimal);
    VAR
      WhseIntPickLine@1001 : Record 7334;
    BEGIN
      WhseIntPickLine.SETCURRENTKEY("To Bin Code","Location Code");
      WhseIntPickLine.SETRANGE("To Bin Code",Code);
      WhseIntPickLine.SETRANGE("Location Code","Location Code");
      WhseIntPickLine.CALCSUMS(Cubage,Weight);
      WhseIntPickCubage := WhseIntPickLine.Cubage;
      WhseIntPickWeight := WhseIntPickLine.Weight;
    END;

    LOCAL PROCEDURE GetItem@2(ItemNo@1000 : Code[20]);
    BEGIN
      IF ItemNo <> Item."No." THEN
        Item.GET(ItemNo);
    END;

    LOCAL PROCEDURE CheckMaxQtyBinContent@4(CheckWeight@1000 : Boolean);
    VAR
      TotalCubage@1002 : Decimal;
      TotalWeight@1003 : Decimal;
      Cubage@1004 : Decimal;
      Weight@1005 : Decimal;
    BEGIN
      IF ("Maximum Cubage" <> 0) OR ("Maximum Weight" <> 0) THEN BEGIN
        BinContent.RESET;
        BinContent.SETRANGE("Location Code","Location Code");
        BinContent.SETRANGE("Bin Code",Code);
        IF BinContent.FIND('-') THEN
          REPEAT
            WMSMgt.CalcCubageAndWeight(
              BinContent."Item No.",BinContent."Unit of Measure Code",
              BinContent."Max. Qty.",Cubage,Weight);
            TotalCubage := TotalCubage + Cubage;
            TotalWeight := TotalWeight + Weight;
          UNTIL BinContent.NEXT = 0;

        IF (NOT CheckWeight) AND ("Maximum Cubage" > 0) AND ("Maximum Cubage" - TotalCubage < 0) THEN
          IF NOT CONFIRM(Text005,FALSE,
               TotalCubage,BinContent.FIELDCAPTION("Max. Qty."),
               FIELDCAPTION("Maximum Cubage"),"Maximum Cubage")
          THEN
            ERROR(Text003);
        IF CheckWeight AND ("Maximum Weight" > 0) AND ("Maximum Weight" - TotalWeight < 0) THEN
          IF NOT CONFIRM(Text006,FALSE,
               TotalWeight,BinContent.FIELDCAPTION("Max. Qty."),
               FIELDCAPTION("Maximum Weight"),"Maximum Weight")
          THEN
            ERROR(Text003);
      END;
    END;

    PROCEDURE CheckWhseClass@6(ItemNo@1000 : Code[20];IgnoreError@1001 : Boolean) : Boolean;
    BEGIN
      GetItem(ItemNo);
      IF IgnoreError THEN
        EXIT("Warehouse Class Code" = Item."Warehouse Class Code");
      TESTFIELD("Warehouse Class Code",Item."Warehouse Class Code");
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckEmptyBin@9(ErrorText@1003 : Text[250]);
    VAR
      WarehouseEntry@1002 : Record 7312;
      WarehouseJnl@1001 : Record 7311;
      WhseActivLine@1000 : Record 5767;
      WhseRcptLine@1004 : Record 7317;
      WhseShptLine@1005 : Record 7321;
    BEGIN
      WarehouseEntry.SETCURRENTKEY("Bin Code","Location Code");
      WarehouseEntry.SETRANGE("Bin Code",Code);
      WarehouseEntry.SETRANGE("Location Code","Location Code");
      WarehouseEntry.CALCSUMS("Qty. (Base)");
      IF WarehouseEntry."Qty. (Base)" <> 0 THEN
        ERROR(
          Text000,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),
          "Location Code",FIELDCAPTION(Code),Code);

      WhseActivLine.SETRANGE("Bin Code",Code);
      WhseActivLine.SETRANGE("Location Code","Location Code");
      WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type"::Movement);
      IF NOT WhseActivLine.ISEMPTY THEN
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WhseActivLine.TABLECAPTION);

      WarehouseJnl.SETRANGE("Location Code","Location Code");
      WarehouseJnl.SETRANGE("From Bin Code",Code);
      IF NOT WarehouseJnl.ISEMPTY THEN
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WarehouseJnl.TABLECAPTION);

      WarehouseJnl.RESET;
      WarehouseJnl.SETRANGE("To Bin Code",Code);
      WarehouseJnl.SETRANGE("Location Code","Location Code");
      IF NOT WarehouseJnl.ISEMPTY THEN
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WarehouseJnl.TABLECAPTION);

      WhseRcptLine.SETRANGE("Bin Code",Code);
      WhseRcptLine.SETRANGE("Location Code","Location Code");
      IF NOT WhseRcptLine.ISEMPTY THEN
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WhseRcptLine.TABLECAPTION);

      WhseShptLine.SETRANGE("Bin Code",Code);
      WhseShptLine.SETRANGE("Location Code","Location Code");
      IF NOT WhseShptLine.ISEMPTY THEN
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WhseShptLine.TABLECAPTION);
    END;

    PROCEDURE CheckIncreaseBin@7(BinCode@1009 : Code[20];ItemNo@1006 : Code[20];Qty@1005 : Decimal;DeductCubage@1013 : Decimal;DeductWeight@1012 : Decimal;PutawayCubage@1008 : Decimal;PutawayWeight@1007 : Decimal;CalledbyPosting@1010 : Boolean;IgnoreError@1000 : Boolean) : Boolean;
    VAR
      WhseActivLine@1001 : Record 5767;
      WMSMgt@1002 : Codeunit 7302;
      AvailableWeight@1003 : Decimal;
      AvailableCubage@1004 : Decimal;
    BEGIN
      IF "Block Movement" IN ["Block Movement"::Inbound,"Block Movement"::All] THEN
        FIELDERROR("Block Movement");

      GetLocation("Location Code");
      IF Code = Location."Adjustment Bin Code" THEN
        EXIT;

      IF ItemNo <> '' THEN
        IF NOT CheckWhseClass(ItemNo,IgnoreError) THEN
          EXIT(FALSE);

      IF (Qty <> 0) AND (("Maximum Cubage" <> 0) OR ("Maximum Weight" <> 0)) THEN
        IF Location."Bin Capacity Policy" IN
           [Location."Bin Capacity Policy"::"Allow More Than Max. Capacity",
            Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap."]
        THEN BEGIN
          CalcCubageAndWeight(AvailableCubage,AvailableWeight,CalledbyPosting);
          IF NOT CalledbyPosting THEN BEGIN
            AvailableCubage := AvailableCubage + DeductCubage;
            AvailableWeight := AvailableWeight + DeductWeight;
          END;

          IF ("Maximum Cubage" <> 0) AND (PutawayCubage > AvailableCubage) THEN
            WMSMgt.CheckPutAwayAvailability(
              BinCode,WhseActivLine.FIELDCAPTION(Cubage),TABLECAPTION,PutawayCubage,AvailableCubage,
              (Location."Bin Capacity Policy" =
               Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap.") AND CalledbyPosting);

          IF ("Maximum Weight" <> 0) AND (PutawayWeight > AvailableWeight) THEN
            WMSMgt.CheckPutAwayAvailability(
              BinCode,WhseActivLine.FIELDCAPTION(Weight),TABLECAPTION,PutawayWeight,AvailableWeight,
              (Location."Bin Capacity Policy" =
               Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap.") AND CalledbyPosting);
        END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetLocation@10(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN
        Location.GET(LocationCode);
    END;

    BEGIN
    END.
  }
}

OBJECT Table 51200 Rack
{
  OBJECT-PROPERTIES
  {
    Date=02/19/18;
    Time=[ 9:44:08 PM];
    Modified=Yes;
    Version List=WCS;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Create UserID" := USERID;
               "Create DataTime" := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               "Modify UserID" := USERID;
               "Modify DateTime" := CURRENTDATETIME;
             END;

  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code10        ;TableRelation=Location }
    { 2   ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code }
    { 3   ;   ;No                  ;Code10         }
    { 4   ;   ;Sections            ;Integer        }
    { 5   ;   ;Levels              ;Integer        }
    { 6   ;   ;Depth               ;Integer        }
    { 7   ;   ;Left                ;Integer        }
    { 8   ;   ;Top                 ;Integer        }
    { 9   ;   ;Width               ;Integer        }
    { 10  ;   ;Height              ;Integer        }
    { 11  ;   ;Rack Orientation    ;Integer        }
    { 12  ;   ;Scheme Visible      ;Boolean        }
    { 13  ;   ;Create DataTime     ;DateTime       }
    { 14  ;   ;Create UserID       ;Code50         }
    { 15  ;   ;Modify DateTime     ;DateTime       }
    { 16  ;   ;Modify UserID       ;Code50         }
  }
  KEYS
  {
    {    ;Location Code,Zone Code,No              ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

